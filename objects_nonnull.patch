diff --git a/infer/src/nullsafe/modelTables.ml b/infer/src/nullsafe/modelTables.ml
index dbfdc75bb..ee89fe828 100644
--- a/infer/src/nullsafe/modelTables.ml
+++ b/infer/src/nullsafe/modelTables.ml
@@ -150,7 +150,19 @@ let check_not_null_parameter_list, check_not_null_list =
     ; ( 1
       , (o, [n; n])
       , "androidx.core.util.Preconditions.checkNotNull(java.lang.Object,java.lang.Object):java.lang.Object"
-      ) ]
+      )
+    ; ( 1
+      , (o, [n])
+      , "java.util.Objects.requireNonNull(java.lang.Object):java.lang.Object"
+      )
+    ; ( 1
+      , (o, [n; n])
+      , "java.util.Objects.requireNonNull(java.lang.Object, java.lang.String):java.lang.Object"
+      )
+    ; ( 1
+      , (o, [n; n])
+      , "java.util.Objects.requireNonNull(java.lang.Object, java.util.function.Supplier):java.lang.Object"
+      )]
   in
   (List.map ~f:(fun (x, _, z) -> (x, z)) list, List.map ~f:(fun (_, y, z) -> (y, z)) list)
 
@@ -207,8 +219,12 @@ let check_argument_list =
 (** Models for boolean functions that return true on null. *)
 let true_on_null_list =
   [ (n1, "android.text.TextUtils.isEmpty(java.lang.CharSequence):boolean")
-  ; (n1, "com.google.common.base.Strings.isNullOrEmpty(java.lang.String):boolean") ]
+  ; (n1, "com.google.common.base.Strings.isNullOrEmpty(java.lang.String):boolean")
+  ; (n1, "java.util.Objects.isNull(java.lang.Object):boolean") ] 
 
+(** Models for boolean functions that return false on null. *)
+let false_on_null_list =
+  [ (n1, "java.util.Objects.nonNull(java.lang.Object):boolean") ] 
 
 (** Models for Map.containsKey *)
 let containsKey_list =
@@ -706,6 +722,8 @@ let noreturn_table = mk_table noreturn_list
 
 let true_on_null_table = mk_table true_on_null_list
 
+let false_on_null_table = mk_table false_on_null_list
+
 let nonnull_alternatives_table =
   let method_descr_to_alternative =
     List.map nullable_methods_with_nonnull_alternatives_list
diff --git a/infer/src/nullsafe/modelTables.mli b/infer/src/nullsafe/modelTables.mli
index c4e738349..1cdb82fcd 100644
--- a/infer/src/nullsafe/modelTables.mli
+++ b/infer/src/nullsafe/modelTables.mli
@@ -35,6 +35,8 @@ val noreturn_table : model_table_t
 
 val true_on_null_table : model_table_t
 
+val false_on_null_table : model_table_t
+
 (** Used to describe a method complementary to a given one. Contains information needed for
     reporting (hence does not describe the whole signature). *)
 type nonnull_alternative_method = {package_name: string; class_name: string; method_name: string}
diff --git a/infer/src/nullsafe/models.ml b/infer/src/nullsafe/models.ml
index b1cca9ced..f5732cc20 100644
--- a/infer/src/nullsafe/models.ml
+++ b/infer/src/nullsafe/models.ml
@@ -120,7 +120,7 @@ let is_false_on_null proc_name =
   (* The only usecase for now - consider all overrides of `Object.equals()` correctly
      implementing the Java specification contract (returning false on null). *)
   PatternMatch.Java.is_override_of_lang_object_equals (Procname.Java proc_name)
-
+   ||  table_has_procedure false_on_null_table proc_name
 
 let is_containsKey proc_name = table_has_procedure containsKey_table proc_name
 
diff --git a/infer/tests/codetoanalyze/java/nullsafe/NullMethodCall.java b/infer/tests/codetoanalyze/java/nullsafe/NullMethodCall.java
index 55b844a04..7fb7f41d7 100644
--- a/infer/tests/codetoanalyze/java/nullsafe/NullMethodCall.java
+++ b/infer/tests/codetoanalyze/java/nullsafe/NullMethodCall.java
@@ -16,6 +16,7 @@ import java.nio.file.Paths;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.concurrent.ConcurrentHashMap;
 import javax.annotation.Nullable;
 
@@ -366,4 +367,38 @@ public class NullMethodCall {
     }
     return object1 == null ? object2.toString() : "null";
   }
+
+  void objectsNonNullOK(@Nullable Object object) {
+   String foo;
+   if (Objects.nonNull(object)) {
+      foo = object.toString();
+    }
+  }
+
+  void objectsNonNullWarn(@Nullable Object object) {
+    String foo;
+    if (! Objects.nonNull(object)) {
+      foo = object.toString();
+    }
+  }
+
+  void objectsIsNullWarn(@Nullable Object object) {
+    String foo;
+    if (Objects.isNull(object)) {
+      foo = object.toString();
+    }
+  }
+
+  void objectsIsNullOK(@Nullable Object object) {
+    String foo;
+    if (!Objects.isNull(object)) {
+      foo = object.toString();
+    }
+  }
+
+  void objectsRequireNonNullOK(@Nullable Object object) {
+    Objects.requireNonNull(object);
+    String foo = object.toString();
+  }
+
 }
diff --git a/infer/tests/codetoanalyze/java/nullsafe/issues.exp b/infer/tests/codetoanalyze/java/nullsafe/issues.exp
index a7fb25601..6e01b8d97 100644
--- a/infer/tests/codetoanalyze/java/nullsafe/issues.exp
+++ b/infer/tests/codetoanalyze/java/nullsafe/issues.exp
@@ -191,28 +191,30 @@ codetoanalyze/java/nullsafe/NullFieldAccess.java, codetoanalyze.java.nullsafe.Nu
 codetoanalyze/java/nullsafe/NullFieldAccess.java, codetoanalyze.java.nullsafe.NullFieldAccess.testInterface():void, 2, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`bad` is nullable and is not locally checked for null when calling `toString()`: field nullable at line 52.], NullFieldAccess, codetoanalyze.java.nullsafe
 codetoanalyze/java/nullsafe/NullFieldAccess.java, codetoanalyze.java.nullsafe.NullFieldAccess.testNonStaticFields():void, 2, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`bad` is nullable and is not locally checked for null when calling `toString()`: field nullable at line 36.], NullFieldAccess, codetoanalyze.java.nullsafe
 codetoanalyze/java/nullsafe/NullFieldAccess.java, codetoanalyze.java.nullsafe.NullFieldAccess.testStatic():void, 2, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`bad` is nullable and is not locally checked for null when calling `toString()`: field nullableStatic at line 44.], NullFieldAccess, codetoanalyze.java.nullsafe
-codetoanalyze/java/nullsafe/NullMethodCall.java, Linters_dummy_method, 22, ERADICATE_META_CLASS_NEEDS_IMPROVEMENT, no_bucket, INFO, [], NullMethodCall, codetoanalyze.java.nullsafe, issues: 23, curr_mode: "Default"
-codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall$Inner.outerField():int, 2, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`s` is nullable and is not locally checked for null when calling `length()`: field fld at line 69.], NullMethodCall$Inner, codetoanalyze.java.nullsafe
-codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall$Inner.outerPrivateField():int, 2, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`s` is nullable and is not locally checked for null when calling `length()`: field pfld at line 80.], NullMethodCall$Inner, codetoanalyze.java.nullsafe
+codetoanalyze/java/nullsafe/NullMethodCall.java, Linters_dummy_method, 23, ERADICATE_META_CLASS_NEEDS_IMPROVEMENT, no_bucket, INFO, [], NullMethodCall, codetoanalyze.java.nullsafe, issues: 25, curr_mode: "Default"
+codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall$Inner.outerField():int, 2, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`s` is nullable and is not locally checked for null when calling `length()`: field fld at line 70.], NullMethodCall$Inner, codetoanalyze.java.nullsafe
+codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall$Inner.outerPrivateField():int, 2, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`s` is nullable and is not locally checked for null when calling `length()`: field pfld at line 81.], NullMethodCall$Inner, codetoanalyze.java.nullsafe
 codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.FP_propagatesNonNullAfterComparisonFieldOkay(java.lang.Object):void, 2, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`NullMethodCall.nullableField` is nullable and is not locally checked for null when calling `toString()`.], NullMethodCall, codetoanalyze.java.nullsafe
 codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.FP_propagatesNonNullAfterComparisonParameterOkay(java.lang.Object,java.lang.Object):void, 3, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`nullableParameter` is nullable and is not locally checked for null when calling `toString()`.], NullMethodCall, codetoanalyze.java.nullsafe
-codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.callOnNull():void, 2, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [NullPointerException will be thrown at this line! `s` is `null` and is dereferenced via calling `length()`: null constant at line 25.], NullMethodCall, codetoanalyze.java.nullsafe
-codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.callingSeverSideNullableGetter(codetoanalyze.java.nullsafe.ServerSideDeserializer):java.lang.String, 1, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`deserializer.nullableGetter()` is nullable and is not locally checked for null when calling `toString()`.], NullMethodCall, codetoanalyze.java.nullsafe, nullable_methods:codetoanalyze.java.nullsafe.ServerSideDeserializer.nullableGetter at 307
+codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.callOnNull():void, 2, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [NullPointerException will be thrown at this line! `s` is `null` and is dereferenced via calling `length()`: null constant at line 26.], NullMethodCall, codetoanalyze.java.nullsafe
+codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.callingSeverSideNullableGetter(codetoanalyze.java.nullsafe.ServerSideDeserializer):java.lang.String, 1, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`deserializer.nullableGetter()` is nullable and is not locally checked for null when calling `toString()`.], NullMethodCall, codetoanalyze.java.nullsafe, nullable_methods:codetoanalyze.java.nullsafe.ServerSideDeserializer.nullableGetter at 308
 codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.nullMethodCallWithAlarmManager(android.app.AlarmManager,android.app.PendingIntent):void, 1, ERADICATE_PARAMETER_NOT_NULLABLE, no_bucket, WARNING, [`AlarmManager.cancel(...)`: parameter #1 is declared non-nullable (according to nullsafe internal models) but the argument `intent` is nullable.], NullMethodCall, codetoanalyze.java.nullsafe
-codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.nullabilityNotPreservedAfterAssignment():void, 3, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`t` is nullable and is not locally checked for null when calling `toString()`: call to getNullable() at line 340.], NullMethodCall, codetoanalyze.java.nullsafe, nullable_methods:codetoanalyze.java.nullsafe.NullMethodCall.getNullable at 340
-codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.nullabilityStoredInBooleanFP():void, 3, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`getNullable()` is nullable and is not locally checked for null when calling `toString()`.], NullMethodCall, codetoanalyze.java.nullsafe, nullable_methods:codetoanalyze.java.nullsafe.NullMethodCall.getNullable at 346
-codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.testExceptionPerInstruction(int):void, 6, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [NullPointerException will be thrown at this line! `s` is `null` and is dereferenced via calling `length()`: null constant at line 181.], NullMethodCall, codetoanalyze.java.nullsafe
-codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.testFieldAssignmentIfThenElse(java.lang.String):void, 2, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`s` is nullable and is not locally checked for null when calling `length()`: null constant at line 172.], NullMethodCall, codetoanalyze.java.nullsafe
-codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.testMapGetBad(java.util.Map,java.util.HashMap,java.util.concurrent.ConcurrentHashMap):void, 2, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`m.get(...)` is nullable and is not locally checked for null when calling `toString()`: call to Map.get(...) at line 260 (nullable according to nullsafe internal models).], NullMethodCall, codetoanalyze.java.nullsafe, nullable_methods:java.util.Map.get at 260
-codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.testMapGetBad(java.util.Map,java.util.HashMap,java.util.concurrent.ConcurrentHashMap):void, 3, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`hm.get(...)` is nullable and is not locally checked for null when calling `toString()`: call to HashMap.get(...) at line 261 (nullable according to nullsafe internal models).], NullMethodCall, codetoanalyze.java.nullsafe, nullable_methods:java.util.HashMap.get at 261
-codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.testMapGetBad(java.util.Map,java.util.HashMap,java.util.concurrent.ConcurrentHashMap):void, 4, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`chm.get(...)` is nullable and is not locally checked for null when calling `toString()`: call to ConcurrentHashMap.get(...) at line 262 (nullable according to nullsafe internal models).], NullMethodCall, codetoanalyze.java.nullsafe, nullable_methods:java.util.concurrent.ConcurrentHashMap.get at 262
-codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.testMapRemoveBad(java.util.Map,java.util.HashMap,java.util.concurrent.ConcurrentHashMap):void, 2, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`m.remove(...)` is nullable and is not locally checked for null when calling `toString()`: call to Map.remove(...) at line 267 (nullable according to nullsafe internal models).], NullMethodCall, codetoanalyze.java.nullsafe, nullable_methods:java.util.Map.remove at 267
-codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.testMapRemoveBad(java.util.Map,java.util.HashMap,java.util.concurrent.ConcurrentHashMap):void, 3, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`hm.remove(...)` is nullable and is not locally checked for null when calling `toString()`: call to HashMap.remove(...) at line 268 (nullable according to nullsafe internal models).], NullMethodCall, codetoanalyze.java.nullsafe, nullable_methods:java.util.HashMap.remove at 268
-codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.testMapRemoveBad(java.util.Map,java.util.HashMap,java.util.concurrent.ConcurrentHashMap):void, 4, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`chm.remove(...)` is nullable and is not locally checked for null when calling `toString()`: call to ConcurrentHashMap.remove(...) at line 269 (nullable according to nullsafe internal models).], NullMethodCall, codetoanalyze.java.nullsafe, nullable_methods:java.util.concurrent.ConcurrentHashMap.remove at 269
+codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.nullabilityNotPreservedAfterAssignment():void, 3, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`t` is nullable and is not locally checked for null when calling `toString()`: call to getNullable() at line 341.], NullMethodCall, codetoanalyze.java.nullsafe, nullable_methods:codetoanalyze.java.nullsafe.NullMethodCall.getNullable at 341
+codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.nullabilityStoredInBooleanFP():void, 3, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`getNullable()` is nullable and is not locally checked for null when calling `toString()`.], NullMethodCall, codetoanalyze.java.nullsafe, nullable_methods:codetoanalyze.java.nullsafe.NullMethodCall.getNullable at 347
+codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.objectsIsNullWarn(java.lang.Object):void, 3, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`object` is nullable and is not locally checked for null when calling `toString()`.], NullMethodCall, codetoanalyze.java.nullsafe
+codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.objectsNonNullWarn(java.lang.Object):void, 3, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`object` is nullable and is not locally checked for null when calling `toString()`.], NullMethodCall, codetoanalyze.java.nullsafe
+codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.testExceptionPerInstruction(int):void, 6, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [NullPointerException will be thrown at this line! `s` is `null` and is dereferenced via calling `length()`: null constant at line 182.], NullMethodCall, codetoanalyze.java.nullsafe
+codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.testFieldAssignmentIfThenElse(java.lang.String):void, 2, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`s` is nullable and is not locally checked for null when calling `length()`: null constant at line 173.], NullMethodCall, codetoanalyze.java.nullsafe
+codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.testMapGetBad(java.util.Map,java.util.HashMap,java.util.concurrent.ConcurrentHashMap):void, 2, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`m.get(...)` is nullable and is not locally checked for null when calling `toString()`: call to Map.get(...) at line 261 (nullable according to nullsafe internal models).], NullMethodCall, codetoanalyze.java.nullsafe, nullable_methods:java.util.Map.get at 261
+codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.testMapGetBad(java.util.Map,java.util.HashMap,java.util.concurrent.ConcurrentHashMap):void, 3, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`hm.get(...)` is nullable and is not locally checked for null when calling `toString()`: call to HashMap.get(...) at line 262 (nullable according to nullsafe internal models).], NullMethodCall, codetoanalyze.java.nullsafe, nullable_methods:java.util.HashMap.get at 262
+codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.testMapGetBad(java.util.Map,java.util.HashMap,java.util.concurrent.ConcurrentHashMap):void, 4, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`chm.get(...)` is nullable and is not locally checked for null when calling `toString()`: call to ConcurrentHashMap.get(...) at line 263 (nullable according to nullsafe internal models).], NullMethodCall, codetoanalyze.java.nullsafe, nullable_methods:java.util.concurrent.ConcurrentHashMap.get at 263
+codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.testMapRemoveBad(java.util.Map,java.util.HashMap,java.util.concurrent.ConcurrentHashMap):void, 2, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`m.remove(...)` is nullable and is not locally checked for null when calling `toString()`: call to Map.remove(...) at line 268 (nullable according to nullsafe internal models).], NullMethodCall, codetoanalyze.java.nullsafe, nullable_methods:java.util.Map.remove at 268
+codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.testMapRemoveBad(java.util.Map,java.util.HashMap,java.util.concurrent.ConcurrentHashMap):void, 3, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`hm.remove(...)` is nullable and is not locally checked for null when calling `toString()`: call to HashMap.remove(...) at line 269 (nullable according to nullsafe internal models).], NullMethodCall, codetoanalyze.java.nullsafe, nullable_methods:java.util.HashMap.remove at 269
+codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.testMapRemoveBad(java.util.Map,java.util.HashMap,java.util.concurrent.ConcurrentHashMap):void, 4, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`chm.remove(...)` is nullable and is not locally checked for null when calling `toString()`: call to ConcurrentHashMap.remove(...) at line 270 (nullable according to nullsafe internal models).], NullMethodCall, codetoanalyze.java.nullsafe, nullable_methods:java.util.concurrent.ConcurrentHashMap.remove at 270
 codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.testNotDetectingInvariantFP(java.lang.Object,java.lang.Object):java.lang.String, 4, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`object2` is nullable and is not locally checked for null when calling `toString()`.], NullMethodCall, codetoanalyze.java.nullsafe
-codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.testPathGetParent():java.lang.String, 1, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`get(...).getParent()` is nullable and is not locally checked for null when calling `toString()`: call to Path.getParent() at line 360 (nullable according to nullsafe internal models).], NullMethodCall, codetoanalyze.java.nullsafe, nullable_methods:java.nio.file.Path.getParent at 360
-codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.testSystemGetPropertyReturn():void, 2, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`s` is nullable and is not locally checked for null when calling `length()`: call to System.getProperty(...) at line 235 (nullable according to nullsafe internal models).], NullMethodCall, codetoanalyze.java.nullsafe, nullable_methods:java.lang.System.getProperty at 235
-codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.testSystemGetenvBad():int, 2, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`envValue` is nullable and is not locally checked for null when calling `length()`: call to System.getenv(...) at line 240 (nullable according to nullsafe internal models).], NullMethodCall, codetoanalyze.java.nullsafe, nullable_methods:java.lang.System.getenv at 240
+codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.testPathGetParent():java.lang.String, 1, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`get(...).getParent()` is nullable and is not locally checked for null when calling `toString()`: call to Path.getParent() at line 361 (nullable according to nullsafe internal models).], NullMethodCall, codetoanalyze.java.nullsafe, nullable_methods:java.nio.file.Path.getParent at 361
+codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.testSystemGetPropertyReturn():void, 2, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`s` is nullable and is not locally checked for null when calling `length()`: call to System.getProperty(...) at line 236 (nullable according to nullsafe internal models).], NullMethodCall, codetoanalyze.java.nullsafe, nullable_methods:java.lang.System.getProperty at 236
+codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.testSystemGetenvBad():int, 2, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`envValue` is nullable and is not locally checked for null when calling `length()`: call to System.getenv(...) at line 241 (nullable according to nullsafe internal models).], NullMethodCall, codetoanalyze.java.nullsafe, nullable_methods:java.lang.System.getenv at 241
 codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.withConditionalAssignemnt(codetoanalyze.java.nullsafe.NullMethodCall$AnotherI,boolean,java.lang.Object,java.lang.Object):void, 2, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`i` is nullable and is not locally checked for null when calling `withObjectParameter(...)`.], NullMethodCall, codetoanalyze.java.nullsafe
 codetoanalyze/java/nullsafe/NullMethodCall.java, codetoanalyze.java.nullsafe.NullMethodCall.withConjuction(codetoanalyze.java.nullsafe.NullMethodCall$AnotherI,boolean,boolean):void, 1, ERADICATE_NULLABLE_DEREFERENCE, no_bucket, WARNING, [`i` is nullable and is not locally checked for null when calling `withBooleanParameter(...)`.], NullMethodCall, codetoanalyze.java.nullsafe
 codetoanalyze/java/nullsafe/NullsafeMode.java, Linters_dummy_method, 16, ERADICATE_META_CLASS_NEEDS_IMPROVEMENT, no_bucket, INFO, [], NullsafeMode, codetoanalyze.java.nullsafe, issues: 13, curr_mode: "Default"
